# -*- coding: utf-8 -*-
##############################################################################
#
#    Copyright (C) 2013 Didotech Inc. (<http://www.didotech.com>)
#    All Rights Reserved
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

import time
import pooler
from report.interface import report_rml
from report import report_sxw
from tools.translate import _
from osv import fields, osv
from tools import to_xml
from datetime import datetime

class report_custom(report_rml):
    
    def create_xml(self, cr, uid, ids, data, context=None):
        partner_id = ids[0]
       
        pool = pooler.get_pool(cr.dbname)
        user_pool = pool.get('res.users')
        company_id = user_pool.browse(cr, uid, uid).company_id
        
        period_from_id = data['form']['period_from_id']
        period_to_id = data['form']['period_to_id']
        pool_period = pool.get('account.period')
        period_from = pool_period.browse(cr, uid, period_from_id)
        period_to = pool_period.browse(cr, uid, period_to_id)
        
        pool_partner = pool.get('res.partner')
        partner = pool_partner.browse(cr, uid, partner_id)
        
        date_from = period_from['date_start']
        date_to = period_to['date_stop']
        rml_obj=report_sxw.rml_parse(cr, uid, pool_period._name,context)
        rml_obj.localcontext.update({'lang':context.get('lang',False)})
        if date_from > date_to:
            raise osv.except_osv(_('Error'), _('Start period should be smaller than end period'))
        
        sql = '''
            select per.name as period_name, per.date_start as period_start, per.date_stop as period_stop,
            sum(inv.amount_untaxed) as total_untaxed, sum(inv.amount_total) as total
            from account_invoice inv inner join account_period per on inv.period_id = per.id
            where inv.partner_id = %s
            and per.date_start >= date(%s)
            and per.date_stop <= date(%s)
            and inv.state in ('open', 'paid')
            group by per.name, per.date_start, per.date_stop
            order by per.date_start
            '''
               
        cr.execute(sql, (partner_id, date_from, date_to))
        
        results = cr.dictfetchall()
        if not results:
            raise osv.except_osv(_('No Data Available'), _('No records found for your selection!'))
        
        xml = ''
        config_start = """
        <config>
            <date>Data: """ + to_xml(rml_obj.formatLang(datetime.now().strftime('%Y-%m-%d'),date=True)) + """</date>
            <reportname>STAMPA CLIENTI/FORNITORI</reportname>
            <company>Azienda: %s</company>
            <PageSize>210.00mm,297.00mm</PageSize>
            <PageWidth>595.27</PageWidth>
            <PageHeight>841.88</PageHeight>
            <tableSize>60.00mm,80.00mm,40.00mm</tableSize>
            """ % (company_id.name)
        config_stop = """
            <report-footer>Generated by OpenERP</report-footer>
        </config>
        """
        
        partner_type =''
        if partner.customer:
            partner_type +='Cliente'
        if partner.customer and partner.supplier:
            partner_type +='/'
        if partner.supplier:
            partner_type +='Fornitore'

        partner_ref = partner.ref or ''
        partner_name = partner.name
        partner_piva = partner.vat or ''
        
        title = """
                <row>
                    <col>""" + to_xml(partner_type) +""": """ + to_xml(partner_ref) + """</col>
                    <col>Rag. Soc.: """ + to_xml(partner_name) + """</col>
                    <col>P.IVA: """ + to_xml(partner_piva) + """</col>
                </row>"""
        
        invoice_header = """
                <row>
                    <col>%s</col>
                    <col t='yes'>%s</col>
                    <col t='yes'>%s</col>
                </row>""" % (_('Periodo'),_('Fatturato'), _('Fatt. Netto'))
                     
        xml += "<lines style='total'>" + title + "</lines>" + "<lines style='header'>" + invoice_header + "</lines>"
        
        purchase_price_digits = rml_obj.get_digits(dp='Purchase Price')
        
        company_currency = company_id.currency_id
        company_currency_symbol = company_currency.symbol or company_currency.name
        
        for period in results:
            period_name = period['period_name']
            total_untaxed = period['total_untaxed'] 
            total = period['total']
            xml += """<lines style='lines'><row>
                <col para='yes'>""" + period_name + """</col>
                <col f='yes'>""" + rml_obj.formatLang(total, digits=purchase_price_digits) + ' '+ (company_currency_symbol)  + """</col>
                <col f='yes'>""" + rml_obj.formatLang(total_untaxed, digits=purchase_price_digits) +' '+ (company_currency_symbol) + """</col>
                </row></lines>"""

        xml = '<?xml version="1.0" ?><report>' + config_start + config_stop + xml + '</report>'

        return xml


report_custom('report.partner.total.invoice', 'account.invoice', '', 'report/partner_invoice.xsl')

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
