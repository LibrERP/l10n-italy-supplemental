-
  I set the main company with round_globally true
-
  !record {model: res.company, id: base.main_company}:
    tax_calculation_rounding_method: round_globally
-
  In order to test tax computation I create a new supplier invoice
-
  !record {model: account.invoice, id: account_invoice_supplier0}:
    account_id: account.a_pay
    address_contact_id: base.res_partner_address_zen
    address_invoice_id: base.res_partner_address_zen
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval time.strftime('%Y-%m-%d')
    #vertical_comp: 1
    supplier_invoice_number: 1
    invoice_line:
      - account_id: account.a_sale
        name: '123.57'
        price_unit: 123.57
        quantity: 1.0
        invoice_line_tax_id:
            - tax_20
    journal_id: account.expenses_journal
    partner_id: base.res_partner_3
    type: in_invoice
-  
    Compute the total tax.
-  
    !python {model: account.invoice}: |
        self.button_compute(cr, uid, [ref("account_invoice_supplier0")])  
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier0}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier0}:
    - state == 'open'
-  
    Then I verify the amount.
    123.57 * 0.2 = 24.714 = 24.71
-
    !python {model: account.invoice}: |
        invoice = self.browse(cr, uid, ref("account_invoice_supplier0"))
        assert invoice.amount_tax == 24.71, 'Invoice tax amount should be 24.71, not {0}.'.format(invoice.amount_tax)
-
  Print the Invoice layout report in Normal Mode
-
  !python {model: account.invoice}: |
    import netsvc, tools, os
    (data, format) = netsvc.LocalService('report.account.invoice').create(cr, uid, [ref('account_invoice_supplier0')], {}, {})
    if tools.config['test_report_directory']:
        file(os.path.join(tools.config['test_report_directory'], 'account_invoice_layout.'+format), 'wb+').write(data)

-
  In order to test tax computation I create a new supplier invoice
-
  !record {model: account.invoice, id: account_invoice_supplier1}:
    account_id: account.a_pay
    address_contact_id: base.res_partner_address_zen
    address_invoice_id: base.res_partner_address_zen
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval time.strftime('%Y-%m-%d')
    #vertical_comp: 1
    supplier_invoice_number: 2
    invoice_line:
      - account_id: account.a_sale
        name: '123.57'
        price_unit: 123.57
        quantity: 1.0
        invoice_line_tax_id:
            - tax_20I5
      - account_id: account.a_sale
        name: '123.57'
        price_unit: 123.57
        quantity: 1.0
        invoice_line_tax_id:
            - tax_20
    journal_id: account.expenses_journal
    partner_id: base.res_partner_3
    type: in_invoice
-  
    Compute the total tax.
-  
    !python {model: account.invoice}: |
        self.button_compute(cr, uid, [ref("account_invoice_supplier1")])  
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier1}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier1}:
    - state == 'open'
-  
    Then I verify the amount.
    123.57 + 123.57 = 247.14
    247.14 × 0.2 = 49.428 = 49.43
-  
    !assert {model: account.invoice, id: account_invoice_supplier1}:
        - amount_tax == 49.43
-
  In order to test tax computation I create a new supplier invoice
-
  !record {model: account.invoice, id: account_invoice_supplier3}:
    account_id: account.a_pay
    address_contact_id: base.res_partner_address_zen
    address_invoice_id: base.res_partner_address_zen
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval time.strftime('%Y-%m-%d')
    #vertical_comp: 1
    supplier_invoice_number: 3
    invoice_line:
      - account_id: account.a_sale
        name: '123.57'
        price_unit: 123.57
        quantity: 1.0
        invoice_line_tax_id:
            - tax_20
      - account_id: account.a_sale
        name: '123.57'
        price_unit: 123.57
        quantity: 1.0
        invoice_line_tax_id:
            - tax_20
    journal_id: account.expenses_journal
    partner_id: base.res_partner_3
    type: in_invoice
-  
    Compute the total tax.
-  
    !python {model: account.invoice}: |
        self.button_compute(cr, uid, [ref("account_invoice_supplier3")])  
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier3}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier3}:
    - state == 'open'
-  
    Then I verify the amount.
    123.57 + 123.57 = 247.14
    247.14 × 0.2 = 49.428 = 49.43
-  
    !assert {model: account.invoice, id: account_invoice_supplier3}:
        - amount_tax == 49.43
-
  In order to test tax computation I create a new supplier invoice
-
  !record {model: account.invoice, id: account_invoice_supplier2}:
    account_id: account.a_pay
    address_contact_id: base.res_partner_address_zen
    address_invoice_id: base.res_partner_address_zen
    company_id: base.main_company
    currency_id: base.EUR
    date_invoice: !eval time.strftime('%Y-%m-%d')
    #vertical_comp: 1
    supplier_invoice_number: 4
    invoice_line:
      - account_id: account.a_sale
        name: '100.03'
        price_unit: 100.03
        quantity: 1.0
        invoice_line_tax_id:
            - tax_20I5
    journal_id: account.expenses_journal
    partner_id: base.res_partner_3
    type: in_invoice
-  
    Compute the total tax.
-  
    !python {model: account.invoice}: |
        self.button_compute(cr, uid, [ref("account_invoice_supplier2")])  
-
  I change the state of invoice to open by clicking Validate button
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_supplier2}
-
  I check that the invoice state is now "Open"
-
  !assert {model: account.invoice, id: account_invoice_supplier2}:
    - state == 'open'
-  
    Then I verify the amount.
    100.03 × 0.2 = 20.006 = 20.01
-  
    !assert {model: account.invoice, id: account_invoice_supplier2}:
        - amount_tax == 20.01
